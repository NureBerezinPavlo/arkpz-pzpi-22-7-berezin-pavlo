Міністерство освіти і науки України
Харківський національний університет радіоелектроніки




Кафедра програмної інженерії




Звіт з практичної роботи № 1
з дисципліни «Аналіз та рефакторинг коду»
на тему «Правила оформлення програмного коду»




Виконав
студент групи ПЗПІ-22-7
	

Березін Павло Павлович
	

Перевірив
ст. викладач кафедри ПІ
	



Сокорчук Ігор Петрович
	



















Харків, 2024
Мета роботи
Опанувати навички рефакторингу програмного коду та закріпити ключові принципи його оформлення.


Хід роботи
Було обрано мову програмування Rust. У презентації (Додаток Б) наведено ключові рекомендації щодо написання програмного коду з прикладами некоректного та якісного оформлення (Додаток А).


Висновки
        Набуто навичок рефакторингу програмного коду, детально розглянуто основні правила оформлення коду.
Посилання на відеопрезентацію: https://youtu.be/s3rq1voXDEc
































ДОДАТОК А
Використаний код для презентації

// Неправильно:
// - Відсутні відступи (все написано в один рядок).
// - Пропущені пробіли навколо операторів і після ком.
// - Назва функції не в snake_case.
// - Відсутня консистентність у форматуванні параметрів функції (a:i32,b :i32).
fn main(){let sum=calculateSum(5,10);println!("{}",sum);}
fn calculateSum(a:i32,b :i32)-> i32 {a+b}


// Правильно
fn main() {
        let sum = calculate_sum(5, 10);
        println!("{}", sum);
}


fn calculate_sum(a: i32, b: i32) -> i32 {
        a + b
}


///////////////////////////////////////////////////////////////


// Неправильно:
// - Функція має неконкретну назву (calc замість описової).
// - Назва структури не відповідає стилю (userAcc замість PascalCase).
// - Поля структури та змінні мають скорочені назви (bal, usr).
fn calc(a: i32, b: i32) -> i32 {
        a + b
}


struct userAcc {
        name: String,
        bal: f64,
}


let usr = userAcc {
        name: String::from("Alice"),
        bal: 100.0,
};


// Правильно
fn calculate_sum(a: i32, b: i32) -> i32 {
        a + b
}


struct UserAccount {
        name: String,
        balance: f64,
}


let user = UserAccount {
        name: String::from("Alice"),
        balance: 100.0,
};


///////////////////////////////////////////////////////////////////


// Неправильно:
// - Коментарі описують очевидні речі (додаємо два числа, вік користувача).
// - Надмірне дублювання в коментарях.
// - Відсутні пояснення, чому використовується певний підхід.


// Додаємо два числа
fn add(a: i32, b: i32) -> i32 { // Ця функція додає два числа
        a + b // результат додавання
}


// створення користувача
struct User {
        name: String,
        age: u32, // вік користувача
}


// Правильно:


/// Обчислює суму двох чисел.
///
/// # Arguments
/// - a - Перше число.
/// - b - Друге число.
///
/// # Returns
/// Сума чисел a та b.
fn add(a: i32, b: i32) -> i32 {
        a + b
}


/// Інформація про користувача програми.
struct User {
        /// Ім'я користувача.
        name: String,
        /// Вік користувача. Використовується для перевірки доступу до певних функцій.
        age: u32,
}




































ДОДАТОК Б
Презентація на тему «Правила оформлення програмного коду».