Міністерство освіти і науки України
Харківський національний університет радіоелектроніки




Кафедра програмної інженерії




Звіт з лабораторної роботи № 3
з дисципліни «Аналіз та рефакторинг коду»
на тему «Розробка бізнес-логіки та функцій 
адміністрування серверної частини програмної системи»




Виконав
студент групи ПЗПІ-22-7
	

Березін Павло Павлович
	

Перевірив
ст. викладач кафедри ПІ
	



Сокорчук Ігор Петрович
	

















Харків, 2024
3.1 Мета роботи


Розробити бізнес-логику та функції адміністрування серверної частини програмної системи.


3.2 Хід роботи
3.2.1 Мета та функціональність бізнес-логіки


Бізнес-логіка серверної частини розроблена для забезпечення автоматизації, аналізу та оптимізації основних процесів, пов’язаних із моніторингом, обслуговуванням та адмініструванням системи керування ліфтами. Вона покриває функціональні можливості, визначені у пункті 2.2 документа Vision & Scope, зокрема:
1. Автоматичний моніторинг стану ліфтів та датчиків у реальному часі (MF-1).
2. Виявлення аварійних ситуацій, формування сповіщень та автоматичне надсилання їх технічному персоналу (MF-2).
3. Аналіз даних для генерації аналітичних звітів, виявлення повторюваних проблем і формування рекомендацій щодо їх усунення (MF-3).
4. Ранжування та сегментація ліфтів за різними критеріями, наприклад, за інтенсивністю використання або кількістю аварій (MF-3).
5. Забезпечення налаштування параметрів системи та адміністрування доступу (MF-8).


        Переваги рішення включають автоматизацію ключових процесів, що зменшує участь людини в рутинних задачах. Система вирізняється гнучкістю, дозволяючи легко налаштовувати її під потреби користувачів. Також забезпечується масштабованість, яка дає можливість розширювати функціонал без значних змін у базовому коді. Крім того, аналітичний підхід допомагає ідентифікувати приховані проблеми та підвищити надійність роботи обладнання.




3.2.2 Особливості реалізації бізнес-логіки


        Бізнес-логіка була реалізована із врахуванням модульності та розширюваності. Основні принципи, використані під час розробки:
1. Модульність:
   1. Бізнес-логіка розділена на окремі функціональні модулі, що дозволяє легко масштабувати систему та додавати новий функціонал без значних змін у базовій структурі.
   2. Наприклад, обробка сенсорних даних, формування звітів, ранжування ліфтів та аналіз даних реалізовані у вигляді окремих функцій, що можуть повторно використовуватися.
2. Автоматизація процесів:
   1. Система автоматично збирає дані з датчиків, аналізує їх та визначає необхідність технічного обслуговування або ремонту.
   2. Автоматичне видалення старих даних, які не мають операційної цінності, для оптимізації використання бази даних.
3. Інтеграція аналітики:
   1. Для аналізу даних використовуються математичні методи, що дозволяють ідентифікувати проблемні ліфти та прогнозувати потенційні несправності.
   2. Вбудована аналітика дозволяє адміністраторам виявляти тренди у використанні обладнання та приймати обґрунтовані рішення.
4. Гнучкість налаштувань:
   1. Адміністративна панель дозволяє змінювати порогові значення для датчиків, задавати періодичність моніторингу, а також редагувати правила формування звітів.
   2. Налаштування системи інтегроване у бізнес-логіку, що забезпечує зручність використання для адміністративного персоналу.
5. Безпека:
   1. Забезпечується розподілення доступу до адміністративних функцій та бізнес-логіки на основі ролей користувачів.
   2. Дані сенсорів та звіти передаються з використанням зашифрованих протоколів.


3.2.3 Функції адміністрування
        Функції адміністрування включають можливість взаємодії адміністратора із системою для управління користувачами, зміни параметрів роботи системи та моніторингу статусу ліфтів. Основні функції:
1. Управління параметрами системи:
   1. Налаштування періодичності збору даних із датчиків.
   2. Зміна порогових значень для спрацювання аварійних сповіщень.
2. Моніторинг статусу системи:
   1. Надання адміністраторам доступу до звітів про стан обладнання.
   2. Відображення інтерактивної карти з активними аварійними сигналами (MF-4).
3. Управління ролями та доступом:
   1. Розподіл ролей між адміністраторами, технічним персоналом та іншими користувачами.
   2. Логування змін у параметрах системи для забезпечення аудиту дій адміністративного персоналу.




3.2.4 UML-діаграми


  

Рисунок 3.1 — UML-діаграма діяльності для серверної частини


  

Рисунок 3.2 — UML-діаграма взаємодії для серверної частини


3.3 Висновки


        Під час виконання лабораторної роботи було програмно реалізовано бізнес-логіку та систему адміністрування програмної системи моніторингу ліфтів у житлових комплексах.
        Посилання на відеопрезентацію: https://youtu.be/Y0Ue9gxNuhc 
        Посилання на Github-репозиторій: 
https://github.com/NureBerezinPavlo/arkpz-pzpi-22-7-berezin-pavlo/tree/main/Task3


ДОДАТОК А
Фрагмент програмного коду бізнес-логіки серверної частини


        Обробка отриманих від датчиків даних:
 1. from app.models.maintenance import MaintenanceRecord
 2. from app.models.threshold import Threshold
 3. from datetime import datetime
 4. from app import db
 5.
 6. def analyze_sensor_data(sensor_data):
 7.         """Аналіз даних сенсорів та генерація сповіщень"""
 8.         thresholds = {t.parameter: t.value for t in Threshold.query.all()}
 9.
10.         alerts = []
11.
12.         # Перевірка температури, вологості та ваги
13.         if sensor_data.get("temperature") is not None and sensor_data.get("temperature") > thresholds.get("temperature", 40):
14.             alerts.append(f"Температура перевищила {thresholds['temperature']}°C.")
15.
16.         if sensor_data.get("humidity") is not None and sensor_data.get("humidity") > thresholds.get("humidity", 90):
17.             alerts.append(f"Вологість перевищила {thresholds['humidity']}%.")
18.
19.         if sensor_data.get("weight") is not None and sensor_data.get("weight") > thresholds.get("weight", 1000):
20.             alerts.append(f"Вага перевищила {thresholds['weight']} кг.")
21.
22.         if not sensor_data.get("is_power_on", True):
23.             alerts.append("Відсутнє електропостачання.")
24.
25.         if sensor_data.get("is_stuck", False):
26.             alerts.append("Ліфт застряг.")
27.
28.         # Визначення типу події
29.         event_type = determine_event_type(alerts)
30.
31.         # Якщо є критичні події, створити заявку на обслуговування
32.         if event_type == "critical":
33.             elevator_id = sensor_data["elevator_id"]
34.             existing_maintenance = MaintenanceRecord.query.filter_by(
35.                 elevator_id=elevator_id,
36.                 description="pending"
37.             ).first()
38.
39.             if not existing_maintenance:
40.                 new_maintenance = MaintenanceRecord(
41.                     elevator_id=elevator_id,
42.                     maintenance_date=datetime.now().date(),
43.                     description="; ".join(alerts),
44.                 )
45.                 db.session.add(new_maintenance)
46.                 db.session.commit()
47.
48.         return alerts, event_type
49.
50. def determine_event_type(alerts):
51.         """
52.         Визначає тип події (event_type) на основі списку сповіщень (alerts).
53.
54.         :param alerts: Список сповіщень. Якщо список порожній — тип normal,
55.                        якщо є сповіщення — critical.
56.         :return: Рядок "normal" або "critical".
57.         """
58.         return "critical" if alerts else "normal"


ДОДАТОК Б
Фрагмент програмного коду адміністрування серверної частини


Функції експорту/імпорту бекапу:
 1. from flask import jsonify, request, send_file
 2. from flask_restx import Namespace, Resource, fields
 3. import os
 4. import json
 5. from app import db
 6. from app.models.sensor import SensorLog
 7. from app.models.elevator import Elevator
 8. from app.models.building import Building
 9. from app.models.maintenance import MaintenanceRecord
10. from app.models.admin import Admin
11. from app.models.technician import Technician
12. from app.models.threshold import Threshold
13. from app.utils.auth import admin_required
14.
15. ns_backup = Namespace('backup', description='Операції з резервними копіями (лише для адміністраторів)')
16.
17. backup_model = ns_backup.model('BackupOperation', {
18.         'file_path': fields.String(description='Шлях до резервної копії')
19. })
20.
21. @ns_backup.route('/export')
22. class BackupExport(Resource):
23.         @ns_backup.response(200, 'Резервна копія відновлена')
24.         @ns_backup.response(403, 'Доступ заборонено')
25.         @ns_backup.response(400, 'Некоректний файл')
26.         @ns_backup.doc(security='BearerAuth')
27.         @admin_required
28.         def get(self):
29.             """Експорт даних до резервної копії"""
30.             file_path = "backup.json"
31.             data = {
32.                 "sensor_logs": [log.as_dict() for log in SensorLog.query.all()],
33.                 "elevators": [elevator.as_dict() for elevator in Elevator.query.all()],
34.                 "buildings": [building.as_dict() for building in Building.query.all()],
35.                 "maintenances": [maintenance.as_dict() for maintenance in MaintenanceRecord.query.all()],
36.                 "admins": [admin.as_dict() for admin in Admin.query.all()],
37.                 "technicians": [technician.as_dict() for technician in Technician.query.all()],
38.                 "thresholds": [threshold.as_dict() for threshold in Threshold.query.all()]
39.             }
40.             with open(file_path, "w") as backup_file:
41.                 json.dump(data, backup_file)
42.
43.             return send_file(file_path, as_attachment=True, download_name="backup.json")
44.
45. @ns_backup.route('/import')
46. class BackupImport(Resource):
47.         @ns_backup.response(200, 'Резервна копія відновлена')
48.         @ns_backup.response(403, 'Доступ заборонено')
49.         @ns_backup.response(400, 'Некоректний файл')
50.         @ns_backup.doc(security='BearerAuth')
51.         @admin_required
52.         def post(self):
53.             """Імпорт даних із резервної копії"""
54.             if 'file' not in request.files:
55.                 return {"message": "Файл не надано"}, 400
56.
57.             backup_file = request.files['file']
58.             if not backup_file.filename.endswith(".json"):
59.                 return {"message": "Некоректний формат файлу. Очікується .json"}, 400
60.
61.             data = json.load(backup_file)
62.             SensorLog.query.delete()
63.             Elevator.query.delete()
64.
65.             for log in data.get("sensor_logs", []):
66.                 new_log = SensorLog(**log)
67.                 db.session.add(new_log)
68.
69.             for elevator in data.get("elevators", []):
70.                 new_elevator = Elevator(**elevator)
71.                 db.session.add(new_elevator)
72.
73.             for building in data.get("buildings", []):
74.                 new_building = Building(**building)
75.                 db.session.add(new_building)
76.
77.             for maintenance in data.get("maintenances", []):
78.                 new_maintenance = MaintenanceRecord(**maintenance)
79.                 db.session.add(new_maintenance)
80.
81.             for admin in data.get("admins", []):
82.                 new_admin = Admin(**admin)
83.                 db.session.add(new_admin)
84.
85.             for technician in data.get("technicians", []):
86.                 new_technician = Technician(**technician)
87.                 db.session.add(new_technician)
88.
89.             for threshold in data.get("thresholds", []):
90.                 new_threshold = Threshold(**threshold)
91.                 db.session.add(new_threshold)
92.
93.             db.session.commit()
94.             return {"message": "Дані успішно відновлено"}, 200