Міністерство освіти і науки України
Харківський національний університет радіоелектроніки




Кафедра програмної інженерії




Звіт з лабораторної роботи № 5
з дисципліни «Аналіз та рефакторинг коду»
на тему «Розгортання програмної
системи та демонстрація її роботи»




Виконав
студент групи ПЗПІ-22-7
	

Березін Павло Павлович
	

Перевірив
ст. викладач кафедри ПІ
	



Сокорчук Ігор Петрович
	

















Харків, 2024
5.1 Мета роботи


        Розгорнути розроблену програмну систему для моніторингу та управління станом ліфтів, налаштувати її роботу, перевірити реалізовану функціональність і продемонструвати основні бізнес-можливості згідно з описом Vision & Scope.


5.2 Опис реалізованої програмної системи


        У рамках цієї лабораторної роботи було розгорнуто серверну частину програмної системи та IoT-клієнт. На сервері було налаштовано середовище для виконання бекенду, включаючи встановлення Python 3.10+, Flask, SQLAlchemy та інших залежностей. Також було налаштовано базу даних PostgreSQL та реалізовано механізм імпорту й експорту бази даних для резервного копіювання.
        IoT-клієнт розроблено як Python-скрипт, що забезпечує збір даних із датчиків і передає ці дані на сервер через HTTP POST-запити. Конфігурації IoT-клієнта дозволяють налаштовувати URL сервера та частоту надсилання даних. Було проведено симуляцію роботи датчиків для перевірки передачі даних і обробки критичних ситуацій.
        Серед функціональних можливостей, реалізованих у цьому семестрі, можна виділити кілька основних. Система моніторингу в реальному часі (MF-1) забезпечує збір даних із датчиків, таких як рух, зупинки, перевантаження, температура та вологість. Серверна частина обробляє отримані дані, зберігає їх у базі даних і робить доступними для подальшого аналізу (MF-3). Система сповіщень автоматично генерує повідомлення для технічного персоналу у разі виявлення несправностей або аварійних ситуацій (MF-2), а також дозволяє повідомляти мешканців про статус ліфта чи ремонтні роботи. Також реалізовано можливість формування історичних звітів з інформацією про аварійні зупинки (MF-2), простої та інтенсивність використання ліфтів. Крім того, адміністратор може налаштовувати параметри роботи системи, включаючи критичні значення для активації сповіщень, періодичність збору даних та інші параметри (MF-8).
        Демонстрація роботи програмної системи включає кілька ключових етапів. Було показано, як серверна частина обробляє дані, отримані від IoT-клієнта, та як реалізована бізнес-логіка відповідає функціональним вимогам. Симуляція роботи датчиків продемонструвала успішну передачу даних із клієнта на сервер, їхнє збереження в базі даних та генерацію сповіщень у разі аварійних ситуацій.


4.3 Висновки
        Під час виконання лабораторної роботи було розгорнуто серверну частину та IoT-клієнт, налаштовано їхню взаємодію, перевірено функціональність системи відповідно до описаного у Vision & Scope. Усі етапи роботи, включаючи перевірку бізнес-логіки, функцій адміністрування та взаємодії IoT-клієнта із сервером, було продемонстровано у відеозаписі. Реалізована програмна система відповідає поставленим завданням і є готовою до подальшого розвитку в наступному семестрі, де буде створено фронтенд та мобільний додаток.
        Посилання на відеопрезентацію: https://youtu.be/ympQai6pKPQ 
        Посилання на Github-репозиторій: https://github.com/NureBerezinPavlo/arkpz-pzpi-22-7-berezin-pavlo/tree/main/Task5